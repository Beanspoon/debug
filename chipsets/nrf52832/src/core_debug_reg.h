#ifndef CORE_DEBUG_REG
#define CORE_DEBUG_REG

#include "types.h"

typedef struct
{
    RW_reg  HALTED  : 1;    // Bit[0] Indicates a debug event generated by C_HALT, C_STEP or step request
    RW_reg  BKPT    : 1;    // Bit[1] Indicates a debug event generated by BKPT instruction excecution or a breakpoint match in FPB
    RW_reg  DWTTRAP : 1;    // Bit[2] Indicates a debug event generated by the DWT
    RW_reg  VCATCH  : 1;    // Bit[3] Indicates triggering of a vector catch
    RW_reg  EXTERNAL    : 1;    // Bit[4] Indicates a debug event generated by assertion of an external debug request
    RW_reg          : 0;
} tCoreDebug_dfsrReg;


typedef struct
{
    tCoreDebug_dfsrReg  DFSR;   // 0x00 Debug fault and status register
    RO_reg  UNUSED_A[0x2f];
    RW_reg  DHCSR;  // 0xC0 Debug halting control and status register
    RW_reg  DCRSR;  // 0xC4 Debug core register selector register
    RW_reg  DCRDR;  // 0xC8 Debug core register data register
    RW_reg  DEMCR;  // 0xCC Debug exception and monitor control register
} tCoreDebug_regMap;

#define CORE_DEBUG_BASE_ADDRESS 0xE000ED30
#define CORE_DEBUG  (*((volatile tCoreDebug_regMap *)CORE_DEBUG_BASE_ADDRESS))

#endif  // CORE_DEBUG_REG